import java.io.BufferedReader;
import java.io.FileInputStream;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.OutputStream;
import java.net.ServerSocket;
import java.net.Socket;

public class HttpServer {
	public static void main(String[] args) {
		WebServer server = new WebServer(8081);
		server.start();
	}
}

class WebServer extends Thread{
	public boolean runFlag = false;
	ServerSocket server = null;
	
	public WebServer(int port){
		try {
			server = new ServerSocket(port);
		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
	}
	
	private String readFile(String filePath){
		String result = "";
		filePath = "/Users/daeho/Downloads" + filePath;
		
		// 1. 읽는 스트림을 연다
		try(FileInputStream fis = new FileInputStream(filePath)){
			// 2. 실제 파일 인코딩을 바꿔주는 래퍼 클래스 사용
			InputStreamReader isr = new InputStreamReader(fis, "UTF-8");

			// 3. 버퍼처리
			BufferedReader br = new BufferedReader(isr);

			// readLine이 null이 아닐때까지 실행
			String row;
			while((row = br.readLine()) != null){
				result += row + "\r\n";
			}
			br.close();
			isr.close();
		}catch(Exception ex){
			ex.printStackTrace();
		}
		
		result = "HTTP/1.0 200 OK \r\n"
			   + "Content-Type: text/html \r\n"
			   + "Content-Length: " + result.getBytes().length + "\r\n"
			   + "\r\n"
			   + result;
		
		return result;
	}
	
	public void run(){
		try{
			runFlag = true;
			while(runFlag){
				// 1. 클라이언트 연결대기
				Socket client = server.accept();
				// 2. 요청에대한 처리를 새로운 thread에서 처리해준다
				new Thread(){
					public void run(){
						try {
							// 3. 스트림을 연결
							InputStreamReader isr = new InputStreamReader(client.getInputStream());
							BufferedReader br = new BufferedReader(isr);
							
							// 4. 웹브라우저에서 요청한 주소로 줄단위의 명령어가 날라오는 것을 꺼내서 처리
							String line = br.readLine();
							if(line != null){
								// 5. 요청된 명령어의 첫줄만 parsing 해서 동작을 결정
								// Method 도메인을제외한조소 프로토콜버전
								String cmd[] = line.split(" ");
								
								String fileContent = readFile(cmd[1]);
								
								OutputStream os = client.getOutputStream();
								// 화면에는 보이지 않는 메타정보
								os.write("HTTP/1.0 200 OK \r\n".getBytes());
								os.write("Content-Type: text/text \r\n".getBytes());
								os.write(("Content-Length: " + fileContent.getBytes().length + "\r\n").getBytes());
								// 헤더와 바디를 구분자를 전송
								os.write("\r\n".getBytes());
								// 실제 전달되는 데이터
								os.write(fileContent.getBytes());
								os.flush();
							}
							
						} catch (IOException e) {
							// TODO Auto-generated catch block
							e.printStackTrace();
						}
					}
				}.start();
			}
		} catch(Exception e) {
			
		}
	}
}