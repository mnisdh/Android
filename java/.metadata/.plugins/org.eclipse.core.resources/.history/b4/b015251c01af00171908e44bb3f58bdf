import java.util.ArrayList;
import java.util.List;
import java.util.Random;

/**
 * Observer pattern
 * 
 * Subject <- Observer
 * 
 * @author daeho
 *
 */
public class DPMain {

	public static void main(String[] args) {
		Subject server = new Subject();
		server.process();
		
		server.addClient(new Client1());
		server.addClient(new Client2());
	}

}

class Client1 implements Subject.IObserver{
	@Override
	public void noti() {
		System.out.println("클라이언트1에 변경사항이 반영됨");
	}
}

class Client2 implements Subject.IObserver{
	@Override
	public void noti() {
		System.out.println("클라이언트2에 변경사항이 반영됨");
	}
}

class Subject{
	private List<IObserver> clients = new ArrayList<>();
	
	public void addClient(IObserver client){
		clients.add(client);
	}
	
	public void process(){
		new Thread(){
			public void run(){
				Random r = new Random();
				while(true){
					for(IObserver client : clients) client.noti();
					
					// 비주기적 갱신을 위한 테스트 코
					try {
						Thread.sleep((r.nextInt(10) + 1) * 1000);
					} catch (InterruptedException e) {
						// TODO Auto-generated catch block
						e.printStackTrace();
					}
				}
			}
		}.start();
	}
	
	public interface IObserver{
		public void noti();
	}
}